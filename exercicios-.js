[M01S06] Exerc√≠cio 1: Explorando m√©todos avan√ßados de Array

T√≥picos: JS Avan√ßado - Map, Filter e Reduce

üìÑ Enunciado:
Crie um arquivo arrays.js com os seguintes desafios:

Use .map() para dobrar os valores de um array de n√∫meros.

Use .filter() para retornar apenas os n√∫meros pares.

Use .reduce() para somar todos os elementos de um array.

üß† Dica: Comente o que cada m√©todo faz.

[M01S06] Exerc√≠cio 2: M√≥dulos JavaScript (ESModules)

Descri√ß√£o:

Crie um arquivo funcoes.js e exporte duas fun√ß√µes: soma(a, b) e dobro(n).

Em outro arquivo main.js, importe essas fun√ß√µes e use-as com valores reais.

Execute no navegador ou com Node (modo module).

üéØ Objetivo: Praticar a separa√ß√£o e reutiliza√ß√£o de c√≥digo com ESModules.

[M01S06] Exerc√≠cio 3: Trabalhando com Promises e Async/Await

Descri√ß√£o:

Simule uma fun√ß√£o buscarDados() que retorna uma Promise com setTimeout.

Crie duas vers√µes de chamada:

Com .then() e .catch()

Com async/await e try/catch

Use console.log para mostrar quando os dados chegaram.

‚è±Ô∏è Dica: Use setTimeout para simular uma demora de 2 segundos.

[M01S06] Exerc√≠cio 4: LocalStorage e Temporizadores

T√≥picos: Browser API - localStorage, setTimeout e setInterval

Descri√ß√£o:

Crie uma p√°gina que salve o nome do usu√°rio no localStorage.

Mostre o nome salvo sempre que a p√°gina for recarregada.

Use setInterval para atualizar um rel√≥gio na tela a cada segundo.

Use setTimeout para mostrar uma mensagem de boas-vindas ap√≥s 3 segundos.

üß† Objetivo: Integrar v√°rias APIs do navegador.

  

